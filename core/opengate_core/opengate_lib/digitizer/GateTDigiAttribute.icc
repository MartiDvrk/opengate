/* --------------------------------------------------
   Copyright (C): OpenGATE Collaboration
   This software is distributed under the terms
   of the GNU Lesser General  Public Licence (LGPL)
   See LICENSE.md for further details
   -------------------------------------------------- */

#include "GateTDigiAttribute.h"
#include "GateDigiCollectionsRootManager.h"
#include "../GateHelpers.h"
#include "G4RunManager.hh"

template<class T>
GateTDigiAttribute<T>::GateTDigiAttribute(std::string vname) : GateVDigiAttribute(vname, 'D') {
    DDE(typeid(T).name());
    DDE(vname);
    Fatal("GateTDigiAttribute constructor must be specialized for this type");
}

template<class T>
GateTDigiAttribute<T>::~GateTDigiAttribute() {
}

template<class T>
void GateTDigiAttribute<T>::InitDefaultProcessHitsFunction() {
  // By default, "do nothing" in the process hit function
  fProcessHitsFunction = [=](GateVDigiAttribute *att, G4Step *) {};
}

template<class T>
int GateTDigiAttribute<T>::GetSize() const {
    return threadLocalData.Get().fValues.size();
}

template<class T>
void GateTDigiAttribute<T>::FillDValue(double) {
    DDE(fDigiAttributeType);
    DDE(fDigiAttributeName);
    Fatal("Cannot use FillDValue for this type");
}

template<class T>
void GateTDigiAttribute<T>::FillSValue(std::string) {
    DDE(fDigiAttributeType);
    DDE(fDigiAttributeName);
    Fatal("Cannot use FillSValue for this type");
}

template<class T>
void GateTDigiAttribute<T>::FillIValue(int) {
    DDE(fDigiAttributeType);
    DDE(fDigiAttributeName);
    Fatal("Cannot use FillIValue for this type");
}

template<class T>
void GateTDigiAttribute<T>::Fill3Value(G4ThreeVector) {
    DDE(fDigiAttributeType);
    DDE(fDigiAttributeName);
    Fatal("Cannot use Fill3Value for this type");
}

template<class T>
void GateTDigiAttribute<T>::FillUValue(GateUniqueVolumeID::Pointer) {
    DDE(fDigiAttributeType);
    DDE(fDigiAttributeName);
    Fatal("Cannot use FillUValue for this type");
}

template<class T>
std::vector<double> &GateTDigiAttribute<T>::GetDValues() {
    Fatal("Cannot use GetDValues for this type, GateTDigiAttribute<T> D");
    return *(new std::vector<double>); // to avoid warning
}

template<class T>
std::vector<int> &GateTDigiAttribute<T>::GetIValues() {
    Fatal("Cannot use GetDValues for this type, GateTDigiAttribute<T> I");
    return *(new std::vector<int>); // to avoid warning
}

template<class T>
std::vector<std::string> &GateTDigiAttribute<T>::GetSValues() {
    Fatal("Cannot use GetDValues for this type, GateTDigiAttribute<T> S");
    return *(new std::vector<std::string>); // to avoid warning
}

template<class T>
std::vector<G4ThreeVector> &GateTDigiAttribute<T>::Get3Values() {
    Fatal("Cannot use GetDValues for this type, GateTDigiAttribute<T> 3");
    return *(new std::vector<G4ThreeVector>); // to avoid warning
}

template<class T>
std::vector<GateUniqueVolumeID::Pointer> &GateTDigiAttribute<T>::GetUValues() {
    Fatal("Cannot use GetDValues for this type, GateTDigiAttribute<T> U");
    return *(new std::vector<GateUniqueVolumeID::Pointer>); // to avoid warning
}

template<class T>
void GateTDigiAttribute<T>::Clear() {
    threadLocalData.Get().fValues.clear();
}

template<class T>
const std::vector<T> &GateTDigiAttribute<T>::GetValues() const {
    return threadLocalData.Get().fValues;
}

template<class T>
void GateTDigiAttribute<T>::Fill(GateVDigiAttribute *input, size_t index) {
    // we assume that the given GateVDigiAttribute has the same type
    auto tinput = static_cast<GateTDigiAttribute<T> *>(input);
    threadLocalData.Get().fValues.push_back(tinput->GetValues()[index]);
}

template<class T>
void GateTDigiAttribute<T>::FillDigiWithEmptyValue() {
    DDE(fDigiAttributeType);
    DDE(fDigiAttributeName);
    Fatal("Must not be here, FillDigiWithEmptyValue must be specialized for this type");
}

template<class T>
void GateTDigiAttribute<T>::FillToRoot(size_t /*index*/) const {
    DDE(fDigiAttributeType);
    DDE(fDigiAttributeName);
    Fatal("Must not be here, FillToRootIfNeeded must be specialized for this type");
}


template<class T>
std::string GateTDigiAttribute<T>::Dump(int i) const {
    std::ostringstream oss;
    oss << threadLocalData.Get().fValues[i];
    return oss.str();
}
